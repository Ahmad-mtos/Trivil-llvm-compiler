модуль pipi
импорт "стд::llvm"
/*
фн fibonacci sequence(n : Цел64) : Цел64 {
    пусть ret: Цел64 := 0
    если n <= 1 {
        ret := n
    }
    иначе {
        ret := fibonacci sequence(n - 1) + fibonacci sequence (n - 2)
    }
    вернуть ret
}

вход {
    llvm.цел64(fibonacci sequence(50))
}
*/


вход {
    пусть n : Цел64 := 100000
    пусть mod : Цел64 := 1000000007
    пусть factorial : Цел64 := 1
    пока истина {
        если n = 0 {
            прервать
        }
        иначе {
            пусть m : Цел64 := n
            factorial := 1
            пока m > 0 {
                factorial := factorial * m 
                factorial := factorial % mod
                m--
            }
            n--
        }
    }

    llvm.цел64(factorial)
}





 //(If (BinaryExpr "Лог" (IdentExpr "Цел64" "x") (Op 31) (LiteralExpr "Цел64" RO (Kind 0) "" [])) (StatementSeq [(AssignStatement (IdentExpr "Цел64" "x") (LiteralExpr "Цел64" RO (Kind 0) "" []))]) (If (BinaryExpr "Лог" (IdentExpr "Цел64" "x") (Op 31) (LiteralExpr "Цел64" RO (Kind 0) "" [])) (StatementSeq [(AssignStatement (IdentExpr "Цел64" "x") (LiteralExpr "Цел64" RO (Kind 0) "" []))]) (StatementSeq [(AssignStatement (IdentExpr "Цел64" "x") (LiteralExpr "Цел64" RO (Kind 0) "" []))])))

 /*
    пусть x2: Вещ64 := 5.5 // TFloat64
    x2 := 5.2


        пусть x4: Лог := истина // TBool
        пусть x5: Лог := истина // TBool
        если x1 <= 1 { x4 := истина }
    пусть x3: Слово64 := 5 // TWord64
    пусть x4: Лог := ложь // TBool
    пусть x5: Символ := 'b' // TSymbol
    пусть x6: Строка := "c" // TString

    //пусть x7: Строка8 := 'd' // TString
    //пусть x8: Пусто := 5 // TNull
}
*/

/*
/*вывод(
120
)
*/
модуль x
(Module "x" [] [(Function "I" "functype" (StatementSeq [(Return (TypeRef "Цел64" Resolved) (IdentExpr "Цел64" "c"))] ))] (EntryFn (StatementSeq [(DeclStatement (VarDecl "x" "Цел64" (LiteralExpr "Цел64" RO (Kind 0) "" [])))] )) )
(Module "x" [] [] (EntryFn (StatementSeq [(DeclStatement (VarDecl "x" "Цел64" (LiteralExpr "Цел64" RO (Kind 0) "" [])))] )) )
(Module "x" [] [] (EntryFn (StatementSeq [(DeclStatement (VarDecl "x" "Цел64" (LiteralExpr "Цел64" RO (Kind 0) "" []))) (AssignStatement (IdentExpr "Цел64" "x") (LiteralExpr "Цел64" RO (Kind 0) "" []))] )) )
(Module "x" [] [(Function "ff" "functype" (StatementSeq [(IncStatement (IdentExpr "Цел64" "c")) (Return (TypeRef "Цел64" Resolved) (IdentExpr "Цел64" "c"))] ))] (EntryFn (StatementSeq [(DeclStatement (VarDecl "x" "Цел64" (LiteralExpr "Цел64" RO (Kind 0) "" [])))] )) )




вход {
    конст
}
конст к1: Цел64 = 1


тип human = класс {
    age: Цел64 = позже
    height := 0
}

тип chimken = класс (human) {

}

    /*пусть числа = Числа[9, 8, 7]
    цикл x среди числа {
        //вывод.ф("$ ", x)
        пусть x1 := x
    }*/
*/
