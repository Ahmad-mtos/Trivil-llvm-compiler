модуль комстрока

импорт "стд::вывод"
импорт "стд::строки"

конст признак-настройки =  '-'(: Байт)

//==== основа

тип Настройка = класс {
    имя: Строка = позже
    описание: Строка = позже
}

фн (н: Настройка) разобрать значение(знач: Строка): Лог {
    авария("должно быть реализовано в расширении")
}

фн (н: Настройка) показать умолчание(): Строка {
    авария("должно быть реализовано в расширении")
}


//==== виды настроек

тип Логическая = класс (Настройка) {
    значение := ложь
    умолчание := ложь
}

тип Строковая = класс (Настройка) {
    значение := ""
    умолчание := ""
}

//==== логические настройки

фн логическая настройка*(имя: Строка, умолчание: Лог, описание: Строка) {
    пусть доп = Логическая{имя: имя, описание: описание, значение: умолчание, умолчание: умолчание}
    словарь.добавить(имя, доп)
}

фн логическое значение*(имя: Строка): Лог {
    пусть эл? = словарь.найти(имя)
    надо эл? # пусто иначе авария(строки.ф("не задана настройка: $;\n", имя))
    
    пусть настройка = эл?^.значение
    надо настройка типа Логическая 
    иначе авария(строки.ф("неверный тип настройки, должна быть логическая: $;\n", имя))

    вернуть настройка(:Логическая).значение
}

фн (лн: Логическая) разобрать значение(знач: Строка): Лог {
    если знач = "да" | знач = "истина" { 
        лн.значение := истина
        вернуть истина
    }
    если знач = "" | знач = "нет" | знач = "ложь" { 
        лн.значение := ложь
        вернуть истина
    }
    вернуть ложь
}

фн (лн: Логическая) показать умолчание(): Строка {
    если лн.умолчание  { вернуть "истина" }
    вернуть "ложь"
}

//==== строковые настройки

фн строковая настройка*(имя: Строка, умолчание: Строка, описание: Строка) {
    пусть доп = Строковая{имя: имя, описание: описание, значение: умолчание, умолчание: умолчание}
    словарь.добавить(имя, доп)
}

фн строковое значение*(имя: Строка): Строка {
    пусть эл? = словарь.найти(имя)
    надо эл? # пусто иначе авария(строки.ф("не задана настройка: $;\n", имя))
    
    пусть настройка = эл?^.значение
    надо настройка типа Строковая 
    иначе авария(строки.ф("неверный тип настройки, должна быть строковая: $;\n", имя))

    вернуть настройка(:Строковая).значение
}

фн (ст: Строковая) разобрать значение(знач: Строка): Лог {
    ст.значение := знач
    вернуть истина
}

фн (ст: Строковая) показать умолчание(): Строка {
    вернуть ст.умолчание 
}

//==== операции

пусть словарь = Словарь{}

// Возвращает ложь, если это не настройка или если настройка с таким именем не определена
фн разобрать настройку(а: Строка): Лог {
    
    пусть а8 = а(:Строка8)
    надо длина(а8) >=2 & а8[0] = признак-настройки иначе вернуть ложь

    пусть №-старт := 1
    если а8[1] = признак-настройки {
        №-старт := 2
        надо длина(а8) >= 3 иначе вернуть ложь
    }

    пусть №-равно := строки.индекс(а, №-старт, "=")
    пусть есть-значение = №-равно > 0
    если №-равно < 0 {
        №-равно := длина(а8)
    }

    пусть имя = строки.извлечь(а, №-старт, №-равно - №-старт)

    пусть эл? = словарь.найти(имя)
    надо эл? # пусто иначе вернуть ложь
    
    если есть-значение {
       пусть знач = строки.извлечь(а, №-равно + 1, длина(а8) - №-равно - 1)
       надо эл?^.значение.разобрать значение(знач) 
       иначе вернуть ложь
    } иначе {
       надо эл?^.значение.разобрать значение("") 
       иначе вернуть ложь
    }
    
    вернуть истина
}

фн показать настройки*() {
    пусть итератор = словарь.начать()

    пока итератор.элемент? # пусто {
        пусть эл = итератор.элемент?^
        пусть доп = эл.значение
        вывод.ф("-$; [$;]: $;\n", доп.имя, доп.показать умолчание(), доп.описание)
        итератор.следующий()
    }
}



